package es.udc.fic.adriblanco.corunaeventhandler;

import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.AsyncTask;
import android.os.Parcel;
import android.os.Parcelable;
import android.util.Log;

import com.google.gson.Gson;

import com.amazonaws.mobileconnectors.dynamodbv2.dynamodbmapper.*;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.Date;

/*
    Class to take all the information about one Event
 */
@DynamoDBTable(tableName = "CorunaEH")
public class Evento implements Parcelable, Comparable<Evento>{
    private static int count = 0;
    private String section;
    private String name;
    private String place;
    private Date date;
    private String price;
    private String desc;
    private String image;
    private String id;

    private final String DATE_FORMAT = "dd/MM/yyyy";

    public Evento(){

    }
    // Section, Name, Desc, da, Price,  image, Place, lon, lat
    public Evento(String s, String n, String d, String da, String pr, String i, String p){
        section = s;
        name = n;
        place = p;
        desc = d;
        setDate(da);
        price = pr;
        image = i;
    }


    private Evento(Parcel in){
        readFromParcel(in);
    }

    public String serialize() {
        Gson gson = new Gson();
        return gson.toJson(this);
    }

    public static Evento create(String data) {
        Gson gson = new Gson();

        return gson.fromJson(data, Evento.class);
    }

    @DynamoDBHashKey(attributeName = "id")
    @DynamoDBAutoGeneratedKey
    public String getId() {
        return id;
    }

    public void setId(String id){
        this.id = id;
    }

    @DynamoDBAttribute(attributeName = "Category")
    public String getSection() {
        return section;
    }

    @DynamoDBAttribute(attributeName = "Name")
    public String getName() {
        return name;
    }

    @DynamoDBAttribute(attributeName = "Place")
    public String getPlace() { return place; }

    @DynamoDBAttribute(attributeName = "Day")
    public Date getDate(){
        return date == null ? new Date() : date;
    }

    @DynamoDBAttribute(attributeName = "Price")
    public String getPrice() {
        return price;
    }

    @DynamoDBAttribute(attributeName = "Description")
    public String getDesc() {return desc; }

    @DynamoDBAttribute(attributeName = "Image")
    public String getImage() {
        return image;
    }

    public static void setCount(int count) {
        Evento.count = count;
    }

    public void setSection(String section) {
        this.section = section;
    }

    public void setName(String name) {
        this.name = name;
    }

    public void setPlace(String place) {
        this.place = place;
    }

    public void setDate(String d){
        try{
            date = new SimpleDateFormat(DATE_FORMAT).parse(d);
        }catch (Exception e){
            Log.d("Error en setDate",d);
        }

    }

    public void setDate(Date d){
        date = d;
    }

    public void setPrice(String price) {
        this.price = price;
    }

    public void setDesc(String desc) {
        this.desc = desc;
    }

    public void setImage(String image) {
        this.image = image;
    }

    public String stringDate(){
        return (date != null) ? new SimpleDateFormat(DATE_FORMAT).format(date) : "";
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        dest.writeString(section);
        dest.writeString(name);
        dest.writeString(place);
        dest.writeString(stringDate());
        dest.writeString(price);
        dest.writeString(desc);
        dest.writeString(image);
        dest.writeString(id);
    }

    private void readFromParcel(Parcel in){
        section = in.readString();
        name = in.readString();
        place = in.readString();
        setDate(in.readString());
        price = in.readString();
        desc = in.readString();
        image = in.readString();
        id = in.readString();
    }

    @Override
    public int compareTo(Evento o) {
        return getDate().compareTo(o.getDate());
    }

    public static final Parcelable.Creator<Evento> CREATOR = new Parcelable.Creator<Evento>() {
        public Evento createFromParcel(Parcel in) {
            return new Evento(in);
        }

        public Evento[] newArray(int size) {
            return new Evento[size];
        }
    };

}
